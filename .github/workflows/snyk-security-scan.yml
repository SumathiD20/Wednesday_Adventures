name: Snyk Security Scan

on:
  push:
    branches:
      - l00187927-WA-Jira18-CIPipeline
      - main
      - develop

jobs:
  build-test-security:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js (version 20)
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20
        cache: 'npm'

    # Step 3: Install npm dependencies for backend and frontend
    - name: Install backend dependencies
      working-directory: ./project-backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    # Step 4: Install Snyk CLI
    - name: Install Snyk CLI
      run: npm install -g snyk

    # Step 5: Validate Snyk API Token
    - name: Validate Snyk API Token
      run: |
        if [ -z "${{ secrets.SNYK_TOKEN }}" ]; then
          echo "ERROR: SNYK_TOKEN is not set or is empty!"
          exit 1
        fi

    # Step 6: Run Snyk Security Scan (Allow pipeline to continue even if vulnerabilities are found)
    - name: Run Snyk Security Scan
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: snyk test --all-projects --severity-threshold=high || echo "Snyk scan completed with issues"

    # Step 7: Monitor vulnerabilities in Snyk (Allow failures)
    - name: Monitor vulnerabilities in Snyk
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: snyk monitor --all-projects || echo "Snyk monitor completed with issues"
           snyk ignore --id=SNYK-JS-NTHCHECK-1586032


    # Step 8: Build Docker image
    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/wednesday-adventures-app:latest .

    # Step 9: Verify Docker Image Exists Locally
    - name: Verify Docker Image
      run: docker images | grep ${{ secrets.DOCKER_USERNAME }}/wednesday-adventures-app || exit 1

    # Step 10: Push Docker Image to Docker Hub (Requires Docker Credentials in GitHub Secrets)
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/wednesday-adventures-app:latest

    # Step 11: Verify Image on Docker Hub
    - name: Verify Image on Docker Hub
      run: docker pull ${{ secrets.DOCKER_USERNAME }}/wednesday-adventures-app:latest
