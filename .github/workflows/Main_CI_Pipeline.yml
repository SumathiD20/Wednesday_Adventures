name: Main CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - l00187927-WA-Jira18-CIPipeline


jobs:
  build_docker_image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Build Backend Docker Image
        run: docker build -t my-backend-image -f Dockerfile.backend .
      
      - name: Build Frontend Docker Image
        run: docker build -t my-frontend-image -f Dockerfile.frontend .
      
      - name: Upload Docker Images
        run: |
          docker save my-backend-image | gzip > backend-image.tar.gz
          docker save my-frontend-image | gzip > frontend-image.tar.gz
        
      - name: Upload Docker artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            backend-image.tar.gz
            frontend-image.tar.gz

  iac_build:
    runs-on: ubuntu-latest
    needs: build_docker_image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Run Infrastructure as Code (IAC) Build
        run: echo "IAC Build Step Placeholder"

  snyk_analysis:
    runs-on: ubuntu-latest
    needs: iac_build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install Snyk CLI
        run: npm install -g snyk
      
      - name: Run Snyk Security Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --all-projects --severity-threshold=high || echo "Snyk scan completed with issues"
      
      - name: Monitor vulnerabilities in Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk monitor --all-projects || echo "Snyk monitor completed with issues"

  sonarcloud_scan:
    runs-on: ubuntu-latest
    needs: snyk_analysis
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Run SonarCloud Scan
        run: |
          docker run --rm \
            -e SONAR_HOST_URL=https://sonarcloud.io \
            -e SONAR_TOKEN=${{ secrets.SONAR_TOKEN }} \
            -v $(pwd):/usr/src \
            sonarsource/sonar-scanner-cli:latest \
            -Dsonar.projectKey=SumathiD20_Wednesday_Adventures \
            -Dsonar.organization=sumathid20 \
            -Dsonar.sources=project-backend,frontend \
            -Dsonar.exclusions=**/node_modules/**,**/tests/** \
            -Dsonar.sourceEncoding=UTF-8

  owasp_zap:
    runs-on: ubuntu-latest
    needs: sonarcloud_scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Run OWASP ZAP Security Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          cmd_options: '-T 120 -J zap_report.json'
          fail_action: false
      
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-report
          path: zap_report.json

  generate_docs:
    runs-on: ubuntu-latest
    needs: owasp_zap
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install dependencies (Backend)
        working-directory: ./project-backend
        run: npm install
      
      - name: Generate JSDoc (Backend)
        working-directory: ./project-backend
        run: npx jsdoc -c jsdoc.json --verbose
      
      - name: Install dependencies (Frontend)
        working-directory: ./frontend
        run: npm install
      
      - name: Generate JSDoc (Frontend)
        working-directory: ./frontend
        run: npx jsdoc -c jsdoc.json --verbose
      
      - name: Upload documentation as artifact
        uses: actions/upload-artifact@v4
        with:
          name: jsdoc-documentation
          path: |
            project-backend/docs
            frontend/docs
