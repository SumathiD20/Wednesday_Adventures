name: OWASP Security Scan

on:
  push:
    branches:
      - main
      - develop
      - l00187927-WA-Jira18-CIPipeline  # ‚úÖ Ensure this branch is included
  pull_request:
    branches:
      - main
      - develop
      - l00187927-WA-Jira18-CIPipeline

jobs:
  owasp-security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    # -------------------------------
    # ‚úÖ Install Dependencies & Start API
    # -------------------------------
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'  # Ensure you use the correct Node.js version based on your app

    - name: Install dependencies
      run: |
        npm install

    - name: Start the Backend API Server
      run: |
        nohup npm start &  # Start your backend API in the background

    # Wait for the server to be fully up before starting the ZAP scan
    - name: Wait for the API to be ready
      run: |
        sleep 30  # You might want to adjust this based on the time it takes for your app to start

    # -----------------------------------------
    # ‚úÖ OWASP Dependency-Check (Dependency Scanning)
    # -----------------------------------------
    - name: Run OWASP Dependency-Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: "Wednesday_Adventures"
        path: "./"  # ‚úÖ Scan the repository codebase
        format: "ALL"  # ‚úÖ Generates JSON, XML, and HTML reports
        out: "./dependency-check-report"

    - name: Upload Dependency-Check Report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: dependency-check-report

    # -----------------------------------------
    # ‚úÖ SonarQube Scan (Static Code Analysis - SAST)
    # -----------------------------------------
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: "https://sonarcloud.io"  # Change if using self-hosted SonarQube

    # -----------------------------------------
    # ‚úÖ OWASP ZAP Scan (Dynamic API Security Testing - DAST)
    # -----------------------------------------
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: "http://localhost:5000/signup"  # üî¥ Local API endpoint
        fail_action: false
        cmd_options: "-a"

    - name: Upload OWASP ZAP Report
      uses: actions/upload-artifact@v4
      with:
        name: zap-security-report
        path: zap.out

    # -----------------------------------------
    # ‚úÖ Fail Build if Critical Vulnerabilities Found
    # -----------------------------------------
    - name: Fail Build on Critical Vulnerabilities
      run: |
        # Check if the JSON report exists and is not empty
        if [ ! -s dependency-check-report/dependency-check-report.json ]; then
          echo "‚ö†Ô∏è No dependency-check report found or it's empty. Skipping failure check."
          exit 0
        fi
        
        # Count critical vulnerabilities safely
        CRITICAL_COUNT=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity=="Critical")] | length' dependency-check-report/dependency-check-report.json)
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "‚ùå Critical vulnerabilities found! Failing the build."
          exit 1
        else
          echo "‚úÖ No critical vulnerabilities found. Proceeding..."
        fi
